{"ast":null,"code":"var _jsxFileName = \"E:\\\\works\\\\chat\\\\nextjs-blog\\\\lib\\\\posts.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport async function getStaticPaths() {\n  const paths = getAllPostIds();\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\"); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Combine the data with the id\n\n  return _objectSpread({\n    id\n  }, matterResult.data);\n}\nexport async function getStaticProps({\n  params\n}) {\n  const postData = getPostData(params.id);\n  return {\n    props: {\n      postData\n    }\n  };\n}\nexport default function Posts({\n  postData\n}) {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, postData.title)), __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, postData.title, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), postData.id, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), postData.date, \" \"));\n}","map":{"version":3,"sources":["E:/works/chat/nextjs-blog/lib/posts.js"],"names":["getAllPostIds","fileNames","fs","readdirSync","postsDirectory","map","fileName","params","id","replace","getStaticPaths","paths","fallback","getPostData","fullPath","path","join","fileContents","readFileSync","matterResult","matter","data","getStaticProps","postData","props","Posts","title","date"],"mappings":";;;;;;;;;;AAAA,OAAO,SAASA,aAAT,GAAyB;AAC9B,QAAMC,SAAS,GAAGC,EAAE,CAACC,WAAH,CAAeC,cAAf,CAAlB;AACA,SAAOH,SAAS,CAACI,GAAV,CAAeC,QAAD,IAAc;AACjC,WAAO;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,EAAE,EAAEF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AAAN;AAAV,KAAP;AACD,GAFM,CAAP;AAGD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,KAAK,GAAGX,aAAa,EAA3B;AACA,SAAO;AAAEW,IAAAA,KAAF;AAASC,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,SAASC,WAAT,CAAqBL,EAArB,EAAyB;AAC9B,QAAMM,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUZ,cAAV,EAA2B,GAAEI,EAAG,KAAhC,CAAjB;AACA,QAAMS,YAAY,GAAGf,EAAE,CAACgB,YAAH,CAAgBJ,QAAhB,EAA0B,MAA1B,CAArB,CAF8B,CAI9B;;AACA,QAAMK,YAAY,GAAGC,MAAM,CAACH,YAAD,CAA3B,CAL8B,CAM9B;;AACA;AACET,IAAAA;AADF,KAEKW,YAAY,CAACE,IAFlB;AAID;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEf,EAAAA;AAAF,CAA9B,EAA0C;AAC/C,QAAMgB,QAAQ,GAAGV,WAAW,CAACN,MAAM,CAACC,EAAR,CAA5B;AACA,SAAO;AAAEgB,IAAAA,KAAK,EAAE;AAAED,MAAAA;AAAF;AAAT,GAAP;AACD;AAED,eAAe,SAASE,KAAT,CAAe;AAAEF,EAAAA;AAAF,CAAf,EAA6B;AAC1C,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,QAAQ,CAACG,KAAjB,CADF,CADF,EAIE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QAAQ,CAACG,KADZ,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGGH,QAAQ,CAACf,EAHZ,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKGe,QAAQ,CAACI,IALZ,EAKkB,GALlB,CAJF,CADF;AAcD","sourcesContent":["export function getAllPostIds() {\r\n  const fileNames = fs.readdirSync(postsDirectory);\r\n  return fileNames.map((fileName) => {\r\n    return { params: { id: fileName.replace(/\\.md$/, \"\") } };\r\n  });\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const paths = getAllPostIds();\r\n  return { paths, fallback: false };\r\n}\r\n\r\nexport function getPostData(id) {\r\n  const fullPath = path.join(postsDirectory, `${id}.md`);\r\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\r\n\r\n  // Use gray-matter to parse the post metadata section\r\n  const matterResult = matter(fileContents);\r\n  // Combine the data with the id\r\n  return {\r\n    id,\r\n    ...matterResult.data,\r\n  };\r\n}\r\n\r\nexport async function getStaticProps({ params }) {\r\n  const postData = getPostData(params.id);\r\n  return { props: { postData } };\r\n}\r\n\r\nexport default function Posts({ postData }) {\r\n  return (\r\n    <div>\r\n      <Head>\r\n        <title>{postData.title}</title>\r\n      </Head>\r\n      <Layout>\r\n        {postData.title}\r\n        <br />\r\n        {postData.id}\r\n        <br />\r\n        {postData.date}{\" \"}\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}